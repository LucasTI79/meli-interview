// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/lucasti79/meli-interview/internal/product"
	mock "github.com/stretchr/testify/mock"
)

// NewServiceMock creates a new instance of ServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceMock {
	mock := &ServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ServiceMock is an autogenerated mock type for the Service type
type ServiceMock struct {
	mock.Mock
}

type ServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceMock) EXPECT() *ServiceMock_Expecter {
	return &ServiceMock_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function for the type ServiceMock
func (_mock *ServiceMock) GetAll(filters product.ProductFilter) ([]product.Product, int, error) {
	ret := _mock.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []product.Product
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(product.ProductFilter) ([]product.Product, int, error)); ok {
		return returnFunc(filters)
	}
	if returnFunc, ok := ret.Get(0).(func(product.ProductFilter) []product.Product); ok {
		r0 = returnFunc(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(product.ProductFilter) int); ok {
		r1 = returnFunc(filters)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(product.ProductFilter) error); ok {
		r2 = returnFunc(filters)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// ServiceMock_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ServiceMock_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - filters product.ProductFilter
func (_e *ServiceMock_Expecter) GetAll(filters interface{}) *ServiceMock_GetAll_Call {
	return &ServiceMock_GetAll_Call{Call: _e.mock.On("GetAll", filters)}
}

func (_c *ServiceMock_GetAll_Call) Run(run func(filters product.ProductFilter)) *ServiceMock_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 product.ProductFilter
		if args[0] != nil {
			arg0 = args[0].(product.ProductFilter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ServiceMock_GetAll_Call) Return(products []product.Product, n int, err error) *ServiceMock_GetAll_Call {
	_c.Call.Return(products, n, err)
	return _c
}

func (_c *ServiceMock_GetAll_Call) RunAndReturn(run func(filters product.ProductFilter) ([]product.Product, int, error)) *ServiceMock_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllWithContext provides a mock function for the type ServiceMock
func (_mock *ServiceMock) GetAllWithContext(ctx context.Context, filters product.ProductFilter) ([]product.Product, int, error) {
	ret := _mock.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetAllWithContext")
	}

	var r0 []product.Product
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, product.ProductFilter) ([]product.Product, int, error)); ok {
		return returnFunc(ctx, filters)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, product.ProductFilter) []product.Product); ok {
		r0 = returnFunc(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, product.ProductFilter) int); ok {
		r1 = returnFunc(ctx, filters)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, product.ProductFilter) error); ok {
		r2 = returnFunc(ctx, filters)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// ServiceMock_GetAllWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllWithContext'
type ServiceMock_GetAllWithContext_Call struct {
	*mock.Call
}

// GetAllWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - filters product.ProductFilter
func (_e *ServiceMock_Expecter) GetAllWithContext(ctx interface{}, filters interface{}) *ServiceMock_GetAllWithContext_Call {
	return &ServiceMock_GetAllWithContext_Call{Call: _e.mock.On("GetAllWithContext", ctx, filters)}
}

func (_c *ServiceMock_GetAllWithContext_Call) Run(run func(ctx context.Context, filters product.ProductFilter)) *ServiceMock_GetAllWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 product.ProductFilter
		if args[1] != nil {
			arg1 = args[1].(product.ProductFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ServiceMock_GetAllWithContext_Call) Return(products []product.Product, n int, err error) *ServiceMock_GetAllWithContext_Call {
	_c.Call.Return(products, n, err)
	return _c
}

func (_c *ServiceMock_GetAllWithContext_Call) RunAndReturn(run func(ctx context.Context, filters product.ProductFilter) ([]product.Product, int, error)) *ServiceMock_GetAllWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type ServiceMock
func (_mock *ServiceMock) GetByID(productId string) (*product.Product, error) {
	ret := _mock.Called(productId)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *product.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*product.Product, error)); ok {
		return returnFunc(productId)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *product.Product); ok {
		r0 = returnFunc(productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(productId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ServiceMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ServiceMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - productId string
func (_e *ServiceMock_Expecter) GetByID(productId interface{}) *ServiceMock_GetByID_Call {
	return &ServiceMock_GetByID_Call{Call: _e.mock.On("GetByID", productId)}
}

func (_c *ServiceMock_GetByID_Call) Run(run func(productId string)) *ServiceMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ServiceMock_GetByID_Call) Return(product1 *product.Product, err error) *ServiceMock_GetByID_Call {
	_c.Call.Return(product1, err)
	return _c
}

func (_c *ServiceMock_GetByID_Call) RunAndReturn(run func(productId string) (*product.Product, error)) *ServiceMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIDWithContext provides a mock function for the type ServiceMock
func (_mock *ServiceMock) GetByIDWithContext(ctx context.Context, productId string) (*product.Product, error) {
	ret := _mock.Called(ctx, productId)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDWithContext")
	}

	var r0 *product.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*product.Product, error)); ok {
		return returnFunc(ctx, productId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *product.Product); ok {
		r0 = returnFunc(ctx, productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, productId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ServiceMock_GetByIDWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIDWithContext'
type ServiceMock_GetByIDWithContext_Call struct {
	*mock.Call
}

// GetByIDWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - productId string
func (_e *ServiceMock_Expecter) GetByIDWithContext(ctx interface{}, productId interface{}) *ServiceMock_GetByIDWithContext_Call {
	return &ServiceMock_GetByIDWithContext_Call{Call: _e.mock.On("GetByIDWithContext", ctx, productId)}
}

func (_c *ServiceMock_GetByIDWithContext_Call) Run(run func(ctx context.Context, productId string)) *ServiceMock_GetByIDWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ServiceMock_GetByIDWithContext_Call) Return(product1 *product.Product, err error) *ServiceMock_GetByIDWithContext_Call {
	_c.Call.Return(product1, err)
	return _c
}

func (_c *ServiceMock_GetByIDWithContext_Call) RunAndReturn(run func(ctx context.Context, productId string) (*product.Product, error)) *ServiceMock_GetByIDWithContext_Call {
	_c.Call.Return(run)
	return _c
}
