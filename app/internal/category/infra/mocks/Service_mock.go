// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/lucasti79/meli-interview/internal/category"
	mock "github.com/stretchr/testify/mock"
)

// NewServiceMock creates a new instance of ServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceMock {
	mock := &ServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ServiceMock is an autogenerated mock type for the Service type
type ServiceMock struct {
	mock.Mock
}

type ServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceMock) EXPECT() *ServiceMock_Expecter {
	return &ServiceMock_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function for the type ServiceMock
func (_mock *ServiceMock) GetAll() ([]category.Category, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []category.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]category.Category, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []category.Category); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]category.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ServiceMock_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ServiceMock_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *ServiceMock_Expecter) GetAll() *ServiceMock_GetAll_Call {
	return &ServiceMock_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *ServiceMock_GetAll_Call) Run(run func()) *ServiceMock_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceMock_GetAll_Call) Return(categorys []category.Category, err error) *ServiceMock_GetAll_Call {
	_c.Call.Return(categorys, err)
	return _c
}

func (_c *ServiceMock_GetAll_Call) RunAndReturn(run func() ([]category.Category, error)) *ServiceMock_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllWithContext provides a mock function for the type ServiceMock
func (_mock *ServiceMock) GetAllWithContext(ctx context.Context) ([]category.Category, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllWithContext")
	}

	var r0 []category.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]category.Category, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []category.Category); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]category.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ServiceMock_GetAllWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllWithContext'
type ServiceMock_GetAllWithContext_Call struct {
	*mock.Call
}

// GetAllWithContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ServiceMock_Expecter) GetAllWithContext(ctx interface{}) *ServiceMock_GetAllWithContext_Call {
	return &ServiceMock_GetAllWithContext_Call{Call: _e.mock.On("GetAllWithContext", ctx)}
}

func (_c *ServiceMock_GetAllWithContext_Call) Run(run func(ctx context.Context)) *ServiceMock_GetAllWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ServiceMock_GetAllWithContext_Call) Return(categorys []category.Category, err error) *ServiceMock_GetAllWithContext_Call {
	_c.Call.Return(categorys, err)
	return _c
}

func (_c *ServiceMock_GetAllWithContext_Call) RunAndReturn(run func(ctx context.Context) ([]category.Category, error)) *ServiceMock_GetAllWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function for the type ServiceMock
func (_mock *ServiceMock) GetByName(name string) (*category.Category, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *category.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*category.Category, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *category.Category); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*category.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ServiceMock_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type ServiceMock_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - name string
func (_e *ServiceMock_Expecter) GetByName(name interface{}) *ServiceMock_GetByName_Call {
	return &ServiceMock_GetByName_Call{Call: _e.mock.On("GetByName", name)}
}

func (_c *ServiceMock_GetByName_Call) Run(run func(name string)) *ServiceMock_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ServiceMock_GetByName_Call) Return(category1 *category.Category, err error) *ServiceMock_GetByName_Call {
	_c.Call.Return(category1, err)
	return _c
}

func (_c *ServiceMock_GetByName_Call) RunAndReturn(run func(name string) (*category.Category, error)) *ServiceMock_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByNameWithContext provides a mock function for the type ServiceMock
func (_mock *ServiceMock) GetByNameWithContext(ctx context.Context, name string) (*category.Category, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByNameWithContext")
	}

	var r0 *category.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*category.Category, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *category.Category); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*category.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ServiceMock_GetByNameWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByNameWithContext'
type ServiceMock_GetByNameWithContext_Call struct {
	*mock.Call
}

// GetByNameWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *ServiceMock_Expecter) GetByNameWithContext(ctx interface{}, name interface{}) *ServiceMock_GetByNameWithContext_Call {
	return &ServiceMock_GetByNameWithContext_Call{Call: _e.mock.On("GetByNameWithContext", ctx, name)}
}

func (_c *ServiceMock_GetByNameWithContext_Call) Run(run func(ctx context.Context, name string)) *ServiceMock_GetByNameWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ServiceMock_GetByNameWithContext_Call) Return(category1 *category.Category, err error) *ServiceMock_GetByNameWithContext_Call {
	_c.Call.Return(category1, err)
	return _c
}

func (_c *ServiceMock_GetByNameWithContext_Call) RunAndReturn(run func(ctx context.Context, name string) (*category.Category, error)) *ServiceMock_GetByNameWithContext_Call {
	_c.Call.Return(run)
	return _c
}
