basePath: /
definitions:
  api.CategoriesResult:
    properties:
      data:
        items:
          $ref: '#/definitions/category.Category'
        type: array
    type: object
  api.CategoryResult:
    properties:
      data:
        items:
          $ref: '#/definitions/category.Category'
        type: array
    type: object
  api.ProductPaginatedResult:
    properties:
      data:
        items:
          $ref: '#/definitions/product.Product'
        type: array
      page:
        type: integer
      pageSize:
        type: integer
      totalCount:
        type: integer
    type: object
  api.ProductResult:
    properties:
      data:
        $ref: '#/definitions/product.Product'
    type: object
  category.Category:
    properties:
      name:
        type: string
    type: object
  httpdto.ErrorResponse:
    properties:
      code:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  product.Product:
    properties:
      category:
        type: string
      description:
        type: string
      image:
        type: string
      inStock:
        type: boolean
      name:
        type: string
      originalPrice:
        type: number
      price:
        type: number
      productId:
        type: string
      rating:
        type: number
      reviews:
        type: integer
    type: object
info:
  contact: {}
  description: This is an example API
  title: Example API
  version: "1.0"
paths:
  /api/v1/categories:
    get:
      consumes:
      - application/json
      description: Get all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.CategoriesResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpdto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpdto.ErrorResponse'
      summary: Get all categories
      tags:
      - Categories
  /api/v1/categories/{categoryName}:
    get:
      consumes:
      - application/json
      description: Get a category by name
      parameters:
      - description: Category Name
        in: path
        name: categoryName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.CategoryResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpdto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpdto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpdto.ErrorResponse'
      summary: Get a category by name
      tags:
      - Categories
  /api/v1/products:
    get:
      consumes:
      - application/json
      description: Get a list of all available products with optional filters
      parameters:
      - collectionFormat: csv
        description: 'in: query'
        in: query
        items:
          type: string
        name: categories
        type: array
      - description: 'in: query'
        in: query
        name: maxPrice
        type: number
      - description: 'in: query'
        in: query
        name: minPrice
        type: number
      - description: 'in: query'
        in: query
        name: name
        type: string
      - description: 'in: query'
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 'in: query'
        in: query
        maximum: 100
        minimum: 1
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ProductPaginatedResult'
        "204":
          description: No content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpdto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpdto.ErrorResponse'
      summary: List all products
      tags:
      - products
  /api/v1/products/{productId}:
    get:
      description: Retrieve details of a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ProductResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpdto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpdto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpdto.ErrorResponse'
      summary: Get a product by ID
      tags:
      - products
swagger: "2.0"
